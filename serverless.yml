#
# This file is part of the ONEMA onema Package.
# For the full copyright and license information,
# please view the LICENSE file that was distributed
# with this source code.
#
# copyright (c) 2018, Juan Manuel Torres (http://onema.io)
#
# @author Juan Manuel Torres <software@onema.io>
#
service: overwatch-reporter

provider:
  name: aws
  runtime: java8
  profile: ${opt:profile, 'default'}
  timeout: 30
  versionFunctions: false
  memorySize: 512
  stage: dev
  region: us-east-1

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements: ${file(infrastructure/global-values.yml):iamRoleStatements}

  # Service wide environment variables
  environment: ${file(infrastructure/global-values.yml):environment}

# Custom values. These can be referenced in the Cloud Formation template
custom: ${file(infrastructure/global-values.yml):custom}

package:
  artifact: target/scala-2.12/app.jar

functions:

  # functions
  notification-reporter:
    handler: io.onema.overwatch.reporter.NotificationReporterFunction::lambdaHandler
    reservedConcurrency: 1
    environment:
      SENDER: ${env:NOTIFICATION_SENDER}
    events:
      - sns:
          arn:
            Fn::ImportValue: "${self:custom.stageName}-notification-topic-arn"
          topicName: "${self:custom.stageName}-notification-topic-arn"
  error-reporter:
    handler: io.onema.overwatch.reporter.ErrorReporterFunction::lambdaHandler
    reservedConcurrency: 1
    environment:
      SENDER: ${env:ERROR_SENDER}
    events:
      - sns:
          arn:
            Fn::ImportValue: "${self:custom.stageName}-error-topic-arn"
          topicName: "${self:custom.stageName}-error-topic-arn"
  metric-reporter:
    handler: io.onema.overwatch.reporter.MetricReporterFunction::lambdaHandler
    reservedConcurrency: 1
    events:
      - sns:
          arn:
            Fn::ImportValue: "${self:custom.stageName}-metric-topic-arn"
          topicName: "${self:custom.stageName}-metric-topic-arn"